// <auto-generated />
using System;
using CarFleet.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CarFleet.DAL.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CarFleet.DAL.Entities.BookingOrder", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("DropoffDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DropoffPlace")
                        .HasColumnType("text");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("PickupDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PickupPlace")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VehicleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CarFleet.DAL.Entities.CompanyReview", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CompanyReviews");
                });

            modelBuilder.Entity("CarFleet.DAL.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("CarFleet.DAL.Entities.Vehicle", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<string>("CategoryId")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Horsepower")
                        .HasColumnType("integer");

                    b.Property<int>("Mileage")
                        .HasColumnType("integer");

                    b.Property<string>("Model")
                        .HasColumnType("text");

                    b.Property<int>("NumberOfSeats")
                        .HasColumnType("integer");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = "25f2c2f8-305a-4e93-a390-32ce220f0a33",
                            Brand = "Hyundai",
                            CategoryId = "0",
                            Description = "Hyundai Solaris — субкомпактный автомобиль южнокорейской компании Hyundai Motors. Автомобиль представляет собой локализованную версию автомобиля Hyundai Accent, адаптированную для эксплуатации в российских условиях.",
                            Horsepower = 100,
                            Mileage = 300,
                            Model = "Solaris",
                            NumberOfSeats = 5,
                            Price = 10
                        },
                        new
                        {
                            Id = "da70aa0b-7134-401f-b44f-104ad1fa0f42",
                            Brand = "Kia",
                            CategoryId = "1",
                            Description = "Kia K5 (также известен как Kia Optima или Kia Magentis) — седан среднего класса южнокорейской автомобилестроительной компании Kia Motors, производство которого было начато в 2000-м году. ",
                            Horsepower = 290,
                            Mileage = 230,
                            Model = "K5",
                            NumberOfSeats = 5,
                            Price = 15
                        },
                        new
                        {
                            Id = "d2b2a8ea-7c15-4d5a-8ec2-3af1a1395a88",
                            Brand = "Mercedes-Benz",
                            CategoryId = "2",
                            Description = "Четырехдверный седан E63 AMG сочетает в себе великолепные ходовые качества и высочайщий комфорт.",
                            Horsepower = 520,
                            Mileage = 180,
                            Model = "E63",
                            NumberOfSeats = 5,
                            Price = 35
                        },
                        new
                        {
                            Id = "4766cca3-4560-472c-ba63-5ff7f93d60bd",
                            Brand = "Tesla",
                            CategoryId = "3",
                            Description = "Tesla Model X — полноразмерный электрический кроссовер производства компании Tesla.",
                            Horsepower = 800,
                            Mileage = 50,
                            Model = "Model X",
                            NumberOfSeats = 5,
                            Price = 50
                        },
                        new
                        {
                            Id = "1b3d78f3-ea42-453b-b3db-9e72d2be25d4",
                            Brand = "Kia",
                            CategoryId = "2",
                            Description = "Kia Stinger — это бескомпромиссный автомобиль для водителя. Здесь все сделано специально для вас, от сидений со спортивной поддержкой до современных технологий. Вы сможете совершать самые продолжительные поездки, не чувствуя усталости.",
                            Horsepower = 300,
                            Mileage = 80,
                            Model = "Stinger",
                            NumberOfSeats = 5,
                            Price = 30
                        },
                        new
                        {
                            Id = "4d6085ca-385c-49c4-9ed9-fb4b75a947b2",
                            Brand = "Mercedes-Benz",
                            CategoryId = "3",
                            Description = "В отличие от иных серий транспортных средств торговой марки Mercedes-Benz, автомобили G-класса сохраняют свой уникальный внешний вид независимо от модификации, будь то заводская или высокопроизводительная",
                            Horsepower = 430,
                            Mileage = 320,
                            Model = "G-Wagen",
                            NumberOfSeats = 5,
                            Price = 40
                        });
                });

            modelBuilder.Entity("CarFleet.DAL.Entities.VehicleCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("VehicleCategories");

                    b.HasData(
                        new
                        {
                            Id = "0",
                            Name = "Econom"
                        },
                        new
                        {
                            Id = "1",
                            Name = "Comfort"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Premium"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Luxury"
                        });
                });

            modelBuilder.Entity("CarFleet.DAL.Entities.VehicleReview", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VehicleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleReviews");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("CarFleet.DAL.Entities.BookingOrder", b =>
                {
                    b.HasOne("CarFleet.DAL.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarFleet.DAL.Entities.Vehicle", "Vehicle")
                        .WithMany("Bookings")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("CarFleet.DAL.Entities.CompanyReview", b =>
                {
                    b.HasOne("CarFleet.DAL.Entities.User", "User")
                        .WithMany("CompanyReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarFleet.DAL.Entities.Vehicle", b =>
                {
                    b.HasOne("CarFleet.DAL.Entities.VehicleCategory", "Category")
                        .WithMany("Vehicles")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CarFleet.DAL.Entities.VehicleReview", b =>
                {
                    b.HasOne("CarFleet.DAL.Entities.User", "User")
                        .WithMany("VehicleReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarFleet.DAL.Entities.Vehicle", "Vehicle")
                        .WithMany("Reviews")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarFleet.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarFleet.DAL.Entities.User", b =>
                {
                    b.Navigation("CompanyReviews");

                    b.Navigation("Orders");

                    b.Navigation("VehicleReviews");
                });

            modelBuilder.Entity("CarFleet.DAL.Entities.Vehicle", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("CarFleet.DAL.Entities.VehicleCategory", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
